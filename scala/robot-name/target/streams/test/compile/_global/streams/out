[0m[[0m[31merror[0m] [0m[0m/home/antonmry/Workspace/Galiglobal/exercism/scala/robot-name/src/test/scala/RobotNameTest.scala:10:22: overloaded method value should with alternatives:[0m
[0m[[0m[31merror[0m] [0m[0m  (endWithWord: org.scalatest.words.EndWithWord)(implicit ev: Robot#name.type <:< String)RobotNameSpecs.this.ResultOfEndWithWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (startWithWord: org.scalatest.words.StartWithWord)(implicit ev: Robot#name.type <:< String)RobotNameSpecs.this.ResultOfStartWithWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (includeWord: org.scalatest.words.IncludeWord)(implicit ev: Robot#name.type <:< String)RobotNameSpecs.this.ResultOfIncludeWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (notExist: org.scalatest.words.ResultOfNotExist)(implicit existence: org.scalatest.enablers.Existence[Robot#name.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (existWord: org.scalatest.words.ExistWord)(implicit existence: org.scalatest.enablers.Existence[Robot#name.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (containWord: org.scalatest.words.ContainWord)org.scalatest.words.ResultOfContainWord[Robot#name.type] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (haveWord: org.scalatest.words.HaveWord)RobotNameSpecs.this.ResultOfHaveWordForExtent[Robot#name.type] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (beWord: org.scalatest.words.BeWord)RobotNameSpecs.this.ResultOfBeWordForAny[Robot#name.type] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (inv: org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[Robot#name.type])(implicit ev: Numeric[Robot#name.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [U](inv: org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[U])(implicit constraint: org.scalactic.CanEqual[Robot#name.type,U])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (notWord: org.scalatest.words.NotWord)org.scalatest.words.ResultOfNotWordForAny[Robot#name.type] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [TYPECLASS1[_], TYPECLASS2[_]](rightMatcherFactory2: org.scalatest.matchers.MatcherFactory2[Robot#name.type,TYPECLASS1,TYPECLASS2])(implicit typeClass1: TYPECLASS1[Robot#name.type], implicit typeClass2: TYPECLASS2[Robot#name.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [TYPECLASS1[_]](rightMatcherFactory1: org.scalatest.matchers.MatcherFactory1[Robot#name.type,TYPECLASS1])(implicit typeClass1: TYPECLASS1[Robot#name.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (rightMatcherX1: org.scalatest.matchers.Matcher[Robot#name.type])org.scalatest.Assertion[0m
[0m[[0m[31merror[0m] [0m[0m cannot be applied to (org.scalatest.words.FullyMatchWord)[0m
[0m[[0m[31merror[0m] [0m[0m    new Robot().name should fullyMatch regex nameRegex[0m
[0m[[0m[31merror[0m] [0m[0m                     ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/antonmry/Workspace/Galiglobal/exercism/scala/robot-name/src/test/scala/RobotNameTest.scala:32:11: overloaded method value should with alternatives:[0m
[0m[[0m[31merror[0m] [0m[0m  (endWithWord: org.scalatest.words.EndWithWord)(implicit ev: name2.type <:< String)RobotNameSpecs.this.ResultOfEndWithWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (startWithWord: org.scalatest.words.StartWithWord)(implicit ev: name2.type <:< String)RobotNameSpecs.this.ResultOfStartWithWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (includeWord: org.scalatest.words.IncludeWord)(implicit ev: name2.type <:< String)RobotNameSpecs.this.ResultOfIncludeWordForString <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (notExist: org.scalatest.words.ResultOfNotExist)(implicit existence: org.scalatest.enablers.Existence[name2.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (existWord: org.scalatest.words.ExistWord)(implicit existence: org.scalatest.enablers.Existence[name2.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (containWord: org.scalatest.words.ContainWord)org.scalatest.words.ResultOfContainWord[name2.type] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (haveWord: org.scalatest.words.HaveWord)RobotNameSpecs.this.ResultOfHaveWordForExtent[name2.type] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (beWord: org.scalatest.words.BeWord)RobotNameSpecs.this.ResultOfBeWordForAny[name2.type] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (inv: org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[name2.type])(implicit ev: Numeric[name2.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [U](inv: org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[U])(implicit constraint: org.scalactic.CanEqual[name2.type,U])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (notWord: org.scalatest.words.NotWord)org.scalatest.words.ResultOfNotWordForAny[name2.type] <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [TYPECLASS1[_], TYPECLASS2[_]](rightMatcherFactory2: org.scalatest.matchers.MatcherFactory2[name2.type,TYPECLASS1,TYPECLASS2])(implicit typeClass1: TYPECLASS1[name2.type], implicit typeClass2: TYPECLASS2[name2.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  [TYPECLASS1[_]](rightMatcherFactory1: org.scalatest.matchers.MatcherFactory1[name2.type,TYPECLASS1])(implicit typeClass1: TYPECLASS1[name2.type])org.scalatest.Assertion <and>[0m
[0m[[0m[31merror[0m] [0m[0m  (rightMatcherX1: org.scalatest.matchers.Matcher[name2.type])org.scalatest.Assertion[0m
[0m[[0m[31merror[0m] [0m[0m cannot be applied to (org.scalatest.words.FullyMatchWord)[0m
[0m[[0m[31merror[0m] [0m[0m    name2 should fullyMatch regex nameRegex[0m
[0m[[0m[31merror[0m] [0m[0m          ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/antonmry/Workspace/Galiglobal/exercism/scala/robot-name/src/test/scala/RobotNameTest.scala:43:31: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Robot#name.type[0m
[0m[[0m[31merror[0m] [0m[0m required: String[0m
[0m[[0m[31merror[0m] [0m[0m      if (alreadySet contains name) {[0m
[0m[[0m[31merror[0m] [0m[0m                              ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/antonmry/Workspace/Galiglobal/exercism/scala/robot-name/src/test/scala/RobotNameTest.scala:46:21: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Robot#name.type[0m
[0m[[0m[31merror[0m] [0m[0m required: String[0m
[0m[[0m[31merror[0m] [0m[0m      alreadySet += name[0m
[0m[[0m[31merror[0m] [0m[0m                    ^[0m
[0m[[0m[31merror[0m] [0m[0mfour errors found[0m
